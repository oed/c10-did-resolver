//jest.mock('cross-fetch', () =>  {
  //return jest.fn(() => ({
    //ok: true,
    //json: async () => JSON.parse('{"value":{"id":"did:3:GENESIS","@context":"https://w3id.org/did/v1","publicKey":[{"id":"did:3:GENESIS#signingKey","type":"Secp256k1VerificationKey2018","publicKeyHex":"0452fbcde75f7ddd7cff18767e2b5536211f500ad474c15da8e74577a573e7a346f2192ef49a5aa0552c41f181a7950af3afdb93cafcbff18156943e3ba312e5b2"},{"id":"did:3:GENESIS#encryptionKey","type":"Curve25519EncryptionPublicKey","publicKeyBase64":"DFxR24MNHVxEDAdL2f6pPEwNDJ2p0Ldyjoo7y/ItLDc="},{"id":"did:3:GENESIS#managementKey","type":"Secp256k1VerificationKey2018","ethereumAddress":"0x3f0bb6247d647a30f310025662b29e6fa382b61d"}],"authentication":[{"type":"Secp256k1SignatureAuthentication2018","publicKey":"did:3:GENESIS#signingKey"}]}}')
  //}))
//})
//import fetch from 'cross-fetch'

import NftResolver from '../index'
import { Resolver } from 'did-resolver'
import Ceramic from '@ceramicnetwork/http-client'
import { EthereumAuthProvider } from '@ceramicnetwork/blockchain-utils-linking'
import ganache from 'ganache-core'
import { ethers, ContractFactory } from 'ethers'
import * as u8a from 'uint8arrays'

const erc721Bytecode = ''
const erc721Abi = [ { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "approved", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" } ], "name": "Approval", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "operator", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" } ], "name": "ApprovalForAll", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" } ], "name": "Transfer", "type": "event" }, { "inputs": [ { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" } ], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "player", "type": "address" }, { "internalType": "string", "name": "tokenURI", "type": "string" } ], "name": "awardItem", "outputs": [ { "internalType": "uint256", "name": "", "type": "uint256" } ], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" } ], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" } ], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "operator", "type": "address" }, { "internalType": "bool", "name": "approved", "type": "bool" } ], "name": "setApprovalForAll", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" } ], "name": "transferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [ { "internalType": "address", "name": "owner", "type": "address" } ], "name": "balanceOf", "outputs": [ { "internalType": "uint256", "name": "", "type": "uint256" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "uint256", "name": "tokenId", "type": "uint256" } ], "name": "getApproved", "outputs": [ { "internalType": "address", "name": "", "type": "address" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "operator", "type": "address" } ], "name": "isApprovedForAll", "outputs": [ { "internalType": "bool", "name": "", "type": "bool" } ], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "name", "outputs": [ { "internalType": "string", "name": "", "type": "string" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "uint256", "name": "tokenId", "type": "uint256" } ], "name": "ownerOf", "outputs": [ { "internalType": "address", "name": "", "type": "address" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" } ], "name": "supportsInterface", "outputs": [ { "internalType": "bool", "name": "", "type": "bool" } ], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "symbol", "outputs": [ { "internalType": "string", "name": "", "type": "string" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "uint256", "name": "tokenId", "type": "uint256" } ], "name": "tokenURI", "outputs": [ { "internalType": "string", "name": "", "type": "string" } ], "stateMutability": "view", "type": "function" } ]


const makeDID = (chainid, address, id) => {
  const caip19 = chainid + '_erc721.' + address + '_' + id
  return 'did:nft:' + (caip19.replace(':', '.'))
}

describe('3ID DID Resolver', () => {
  const chainid = 'eip155:1337'
  let config
  let account1, account2
  let did1, did2, did3

  beforeAll(async () => {
    config = {
      ceramic: new Ceramic(),
      ethereumRpcs: {
        [chainid]: 'http://localhost:8545'
      }
    }
    const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545')
    const signer1 = provider.getSigner(1)
    account1 = (await signer1.getAddress()).toLowerCase()
    const signer2 = provider.getSigner(2)
    account2 = (await signer2.getAddress()).toLowerCase()
    //const sign = await signer.signMessage('asdfasdf')
    //console.log('p', sign)
    const factory = new ContractFactory(erc721Abi, erc721Bytecode, signer1)
    const contract = await factory.deploy()
    // mint some tokens
    const a = await contract.awardItem(account1, 'ceramic://lolol1')
    const b = await contract.awardItem(account2, 'ceramic://lolol2')
    did1 = makeDID(chainid, contract.address, 1)
    did2 = makeDID(chainid, contract.address, 2)
    did3 = makeDID(chainid, contract.address, 3)
    // create caip10-link

    const ethauthprov = new EthereumAuthProvider({
      send: async (data, cb) => {
        if (data.method === 'eth_chainId') {
          cb(null, {result: '0x0539'})
        } else if (data.method === 'eth_getCode') {
          cb(null, {result: '0x'})
        } else {
          // it's personal_sign
          const msg = u8a.toString(u8a.fromString(data.params[0].slice(2), 'base16'))
          const sign = await signer2.signMessage(msg)
          cb(null, {result: sign})
        }
      }
    }, account2)
    const proof = await ethauthprov.createLink('did:3:testing')
    const doc = await config.ceramic.createDocument('caip10-link', {
      metadata: { family: 'caip10-link', controllers: [proof.account] }
    })
    await doc.change({ content: proof })
  })

  it('getResolver works correctly', async () => {
    const nftResolver = NftResolver.getResolver(config)
    expect(Object.keys(nftResolver)).toEqual(['nft'])
  })

  it('resolves nft document without caip10-link', async () => {
    const nftResolver = NftResolver.getResolver(config)
    const resolver = new Resolver(nftResolver)
    expect(await resolver.resolve(did1)).toEqual({
      didDocument: {
        id: did1,
        verificationMethod: [{
          blockchainAccountId: account1 + '@' + chainid,
          controller: did1,
          id: did1 + '#owner',
          type: 'BlockchainVerificationMethod2021'
        }]
      },
      didDocumentMetadata: {},
      didResolutionMetadata: { contentType: 'application/did+json' }
    })
  })

  it('resolves nft document with caip10-link', async () => {
    const nftResolver = NftResolver.getResolver(config)
    const resolver = new Resolver(nftResolver)
    expect(await resolver.resolve(did2)).toEqual({
      didDocument: {
        id: did2,
        controller: 'did:3:testing',
        verificationMethod: [{
          blockchainAccountId: account2 + '@' + chainid,
          controller: did2,
          id: did2 + '#owner',
          type: 'BlockchainVerificationMethod2021'
        }]
      },
      didDocumentMetadata: {},
      didResolutionMetadata: { contentType: 'application/did+json' }
    })
  })

  it('throws on invalid did', async () => {
    const nftResolver = NftResolver.getResolver(config)
    const resolver = new Resolver(nftResolver)
    expect(await resolver.resolve(did3)).toEqual({
      didDocument: null,
      didDocumentMetadata: {},
      didResolutionMetadata: {
        error: "invalidDid",
        message: "Error: VM Exception while processing transaction: revert ERC721: owner query for nonexistent token"
      }
    })
  })
})
